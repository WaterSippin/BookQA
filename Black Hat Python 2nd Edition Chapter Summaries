1
1. The network is and always will be the sexiest arena for a hacker.
2. An attacker can do almost anything with simple network access such as scan for hosts, inject packets, sniff data, and remotely exploit hosts.
3. In some cases, you may find yourself without the necessary tools to execute network attacks, but you might be surprised to find that you'll have a Python install, which can be used as a foundation for subsequent chapters.
4. Python networking provides third-party tools to create networked servers and clients, but the core module for all of those tools is the socket module.
5. The socket module exposes all of the necessary pieces to quickly write Transmission Control Protocol (TCP) and User Datagram Protocol (UDP) clients and servers, use raw sockets, and more.
6. The first code snippet explains how to create a TCP client using the socket module. It includes steps to create a socket object, connect the client, send data, receive data, and close the socket.
7. The second code snippet explains how to create a UDP client using the same socket module. It includes steps to create a socket object, send data, receive data, and close the socket.
8. The third code snippet explains how to create a TCP server using the socket module. It includes steps to create a socket object, bind it to an IP and port, listen for incoming connections, accept connections, handle client connections, and close the sockets.
9. The fourth code snippet explains how to replace the functionality of Netcat using Python. It includes steps to create a network client and server that can be used to push files, execute remote commands, or open a remote shell.
10. The fifth code snippet explains how to build a TCP proxy using the socket module. It includes steps to create a server loop, handle client connections, and forward traffic between a local and remote machine.
11. The sixth code snippet explains how to use the Paramiko library to establish SSH connections and run commands on remote systems. It includes examples of running commands on SSH servers and SSH clients, as well as setting up reverse tunneling for network access.
12. The seventh code snippet explains how to set up an SSH tunnel using Paramiko's reverse forward tunneling function. It includes steps for connecting to an SSH server, forwarding remote ports, and handling the communication between local and remote machines.
13. These tools and techniques can be used in penetration tests, post-exploitation activities, or bug hunting. They provide the foundation for more advanced network-related tasks in subsequent chapters.









2
- Network sniffers allow you to see packets entering and exiting a target machine
- Existing sniffing tools like Wireshark or Scapy can be used
- Writing your own sniffer can give you a deeper understanding of networking and Python techniques
- Raw sockets are used to access lower level networking information such as IP and ICMP headers
- A brief walk-through on discovering active hosts on a network segment is provided
- A UDP host discovery tool is built to focus reconnaissance and exploitation attempts
- The use of ctypes and struct modules for reading and parsing binary data is explained
- IP headers are decoded to extract protocol type, source and destination IP addresses
- ICMP packets are decoded to identify Destination Unreachable messages
- The ipaddress module is used to handle subnets and IP address calculations
- A scanner is built to discover live hosts on a network using UDP datagrams and ICMP responses
- The icmp library is used to decode ICMP responses and verify if they contain the magic string
- The code snippet for the scanner is provided




3
The key points of this chapter are as follows:

1. Scapy is a powerful and flexible packet manipulation library in Python.
2. Scapy can be used to sniff network traffic, steal plaintext email credentials, ARP poison a target machine, and perform other network-related tasks.
3. Scapy is recommended to be used on a Linux system, but it also supports Windows.
4. You can use Scapy to create a sniffer that captures packets and dissects their contents.
5. The Berkeley Packet Filter (BPF) can be used to specify filters for the packets to sniff.
6. Scapy can be used to perform ARP poisoning, where you convince a target machine that you are its gateway.
7. ARP poisoning can be used to sniff the traffic of a target machine on the same network.
8. The pcap file format can be analyzed using Scapy to extract images from HTTP traffic.
9. OpenCV can be used in conjunction with Scapy to perform facial detection on the extracted images.
10. By combining Scapy, pcap processing, and facial detection, you can gain insights into the network traffic and identify potential interesting images.

Note: This chapter assumes a basic understanding of networking and packet manipulation.




4
Summary of key points in the text:
- Analyzing web applications is an important skill for attackers and penetration testers.
- Web applications are the most common target for gaining access to a network.
- Python has excellent web application tools like w3af and sqlmap.
- Interacting with the web using Python allows for creating reconnaissance and brute force tools.
- The urllib2 library in Python 2 is used for making GET requests to websites.
- The urllib library in Python 3 is used for making HTTP requests and supports context managers.
- The requests library is recommended for higher-level HTTP client interface.
- The lxml and BeautifulSoup packages are commonly used for parsing HTML content.
- Building a web application mapping tool involves creating a map of directories and filenames and testing them against a live target.
- Brute forcing directories and file locations involves using a word list and a brute forcing tool to discover reachable files on a web server.
- Brute forcing HTML form authentication involves retrieving the login form, parsing form elements, and sending login attempts with cookies and form fields.
- The HTMLParser class in the standard library can be used for parsing HTML content.
- Testing brute forcing tools should be done on a controlled environment to avoid unauthorized access.




5
Summary of key points in the text:

- The chapter discusses extending Burp Proxy, a web application hacking tool.
- It describes how to write extensions using Python, Ruby, or Java to add custom functionality to Burp Suite.
- The chapter provides examples of extensions, including a mutation fuzzer, a tool to find virtual hosts on the same IP address as a target site, and a word list generator for brute force password attacks.
- It explains how to set up Burp Suite, including installing Java and Jython.
- The chapter also covers how to use the Burp API documentation as a guide for creating extensions.
- It demonstrates how to use the extensions in Burp Suite by performing attacks and reconnaissance on a target website.
- Finally, it explains how to generate a word list based on website content for password guessing attacks.




6
Summary of the chapter's key points:
1. This chapter discusses creating a trojan framework using GitHub as a command and control mechanism.
2. The chapter focuses on creating a solid trojan framework that can control, update, and receive data from implants.
3. GitHub is used as a way to store configuration information for implants, exfiltrate data from victim systems, and host modules needed for executing tasks.
4. The chapter explains how to set up a GitHub account, install the Python GitHub API library, and create a basic structure for the repository.
5. Simple modules are created to test and deploy in the trojan framework.
6. The chapter discusses configuring the trojan to perform certain actions by using a configuration file.
7. The trojan is built to retrieve configuration options and code from GitHub, and perform tasks based on the configuration.
8. The chapter explains how to hack Python's import functionality to import remote files from the GitHub repository.
9. Finally, the trojan is tested by running it from the command line and checking in the results of the running modules to the GitHub repository.

Note: The summary is based on the information provided in the text and may not cover all details.




7
Summary of the key points in Chapter 8:
1. This chapter focuses on common trojaning tasks on Windows systems.
2. It discusses tasks such as grabbing keystrokes, taking screenshots, and executing shellcode to provide an interactive session to tools like CANVAS or Metasploit.
3. It also explores sandbox detection techniques to determine if the trojan is running within an antivirus or forensics sandbox.
4. The chapter provides code examples for creating a keylogger, taking screenshots, and executing shellcode.
5. It explains how to test and modify the code to suit different needs.
6. It introduces a sandbox detection method based on monitoring user input, such as keystrokes and mouse clicks.
7. The chapter encourages further customization and exploration of additional features, such as virtual machine detection.




8
Summary of Key Points in the Text:

- The chapter discusses various methods of exfiltrating data from a target system.
- The chapter begins by introducing the concept of exfiltration and the challenges it can pose due to defense mechanisms in place.
- The chapter then discusses the creation of tools to exfiltrate encrypted data through email, file transfers, and posts to a web server.
- The chapter provides code examples for encrypting and decrypting files using symmetric and asymmetric encryption methods.
- The chapter also provides code examples for exfiltrating encrypted data through email, file transfer, and web server posts.
- Windows-specific functions are included using the PyWin32 libraries for interacting with network-based services and embedding Excel spreadsheets.
- The chapter concludes by explaining how to put all the exfiltration methods together in a main function and provides a sample of how to use it to exfiltrate files.

Note: This is a summary of the text and not the complete content.




9
Summary of the key points in the text:

- Privilege escalation is important even if you already have high-level access, as it provides multiple ways to maintain access in case of loss due to patch cycles or other factors.
- Exploiting poorly coded drivers or native Windows kernel issues is a typical method of privilege escalation, but it can be risky and cause system instability.
- System administrators and vendors often automate tasks or services that execute child processes or scripts, which can be potential targets for privilege escalation.
- Windows Management Instrumentation (WMI) can be used to monitor the creation of new processes and gather useful data about the processes, such as file paths, user who created the process, and enabled privileges.
- Monitoring scripts can be created to track the creation of new files and examine their contents for potential code injection.
- Code injection can be used to inject malicious code into target files, such as VBScript or PowerShell scripts, to escalate privileges and gain control over the system.
- With proper monitoring and code injection, privilege escalation can lead to obtaining higher-level access, such as the SYSTEM account.




10
Summary of Chapter 11: Offensive Forensics
This chapter focuses on the use of the Volatility framework for offensive forensics. The chapter begins by introducing the concept of offensive forensics and the use of Volatility for this purpose. The chapter then provides a step-by-step guide on the installation of Volatility.

The main part of the chapter is dedicated to a detailed explanation of how to perform offensive forensics using Volatility. This includes using Volatility to analyze a memory snapshot, extracting information about processes and their behaviors, analyzing network connections, and checking for ASLR protection.

The chapter also covers the creation of custom Volatility plugins, providing a skeleton code for a custom plugin that checks for ASLR protection in processes.

In conclusion, the chapter highlights the power of Volatility for offensive forensics and encourages readers to explore the possibilities of creating their own custom tools using Python.
